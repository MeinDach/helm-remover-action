#!/bin/bash

set -eo pipefail

if [[ -z "$GCLOUD_ZONE" ]]; then
  echo "Set the GCLOUD_ZONE env variable."
  exit 1
fi

if [[ -z "$GCLOUD_CLUSTER" ]]; then
  echo "Set the GCLOUD_CLUSTER env variable."
  exit 1
fi

if [[ -z "$GCLOUD_PROJECT" ]]; then
  echo "Set the CLOUD_PROJECT env variable."
  exit 1
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
	echo "Set the GITHUB_TOKEN env variable."
	exit 1
fi

if [[ -z "$GITHUB_REPOSITORY" ]]; then
	echo "Set the GITHUB_REPOSITORY env variable."
	exit 1
fi

if [[ -z "$REPO_TYPE" ]]; then
	echo "Set the REPO_TYPE env variable. Either FRONTEND or BACKEND. It is needed to build the helm chart name"
	exit 1
fi

URI=https://api.github.com
API_VERSION=v3
API_HEADER="Accept: application/vnd.github.${API_VERSION}+json"
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"

main() {
    echo "Start Main"
    # Get all necessary vars from GITHUB_EVENT_PATH json
    ref=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
  	action=$(jq --raw-output .action "$GITHUB_EVENT_PATH")
    pr_nr=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
    repo=$(jq --raw-output .repository.name "$GITHUB_EVENT_PATH")
    ref=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
		owner=$(jq --raw-output .pull_request.head.repo.owner.login "$GITHUB_EVENT_PATH")
    merged=$(jq --raw-output .pull_request.merged "$GITHUB_EVENT_PATH")
    
    # build chart name for frontend repos
    chart_name="rv-md1-$pr_nr-$repo"
    if [["$REPO_TYPE" == "FRONTEND" ]]; then 
      chart_name="pr-$pr_nr-$repo"
    fi
    
	  echo "DEBUG -> action: $action merged: $merged chart_name: $chart_name"
    if [[ "$action" == "closed" ]]; then 
      echo "Remove helm chart: $chart_name"
      # Login Gcloud
      gcloud container clusters get-credentials $GCLOUD_CLUSTER --zone $GCLOUD_ZONE --project $GCLOUD_PROJECT
      # Delete helm chart which then also deletes all pods services etc
      helm delete $chart_name --purge
      
      # Delete Branch
      if [[ "$merged" == "true" && "$ref" != "master" ]]; then 
        echo "Deleting branch ref $ref for owner ${owner}/${repo}..."
        curl -XDELETE -sSL \
        -H "${AUTH_HEADER}" \
        -H "${API_HEADER}" \
        "${URI}/repos/${owner}/${repo}/git/refs/heads/${ref}"
      fi
    fi
}

main "$@"